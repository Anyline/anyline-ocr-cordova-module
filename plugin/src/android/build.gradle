repositories {
    google()
    jcenter()
    maven { url 'https://anylinesdk.blob.core.windows.net/maven/' }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation 'io.anyline:anylinesdk:50.0.2'
    implementation("com.google.android.material:material:1.4.0-rc01")
}

android {

    defaultConfig {
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'

        // Below is the full list of modules
        def all_modules = [
                "module_anyline_ocr",
                "module_barcode",
                "module_document",
                "module_energy",
                "module_id",
                "module_license_plate",
                "module_tire"
        ].toList()

        def used_modulesString = ''
        new XmlSlurper().parse(file('../app/src/main/res/xml/config.xml')).preference.each {
            if (it.@name.text() == 'anyline-retain-assets-pattern') {
                used_modulesString = it.@value.text().toLowerCase()
            }
        }

        def used_modules

        // Convert the string to a list
        if (!used_modulesString.isEmpty()) {
            used_modules = used_modulesString.split(":")
        }

        if (used_modules) {

            // All used modules are kept, the rest are discarded (to shrink your app)
            all_modules.removeAll(used_modules)

            def all_removed_modules = all_modules.join(":")

            if (!all_removed_modules.isEmpty()) {
                aaptOptions {
                    println "Anyline: ignore assets pattern --> $all_removed_modules"
                    ignoreAssetsPattern all_removed_modules
                }
            }
        }
    }
}

ext.postBuildExtras = {
    android {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
    }
}
